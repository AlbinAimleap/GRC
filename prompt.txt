
### Task Description:

Your task is to dynamically calculate and update the `unit_price` and `promo_price` based on any type of promotion description provided in the input. The promotion description may include percentage discounts, fixed discounts, bundles, buy-get offers, spend-based discounts, and multiple promo combinations. If no promo description is provided, the `unit_price` and `promo_price` should be the same as the regular price.

### Promotion Types and Calculation Logic:

1. **Spend-Based Discounts**:
    - **$X off when you spend $Y** (e.g., "$5.00 off when you spend $25"):
      - Apply the discount only if the condition is met (e.g., total spend â‰¥ $25).
      - `promo_price = sale_price - discount_value` if the total spend qualifies.
      - If the condition isn't met, `promo_price = sale_price`.

2. **Fixed Amount Off**:
    - **$X off per item** (e.g., "$1.00 off 52-oz."):
      - `promo_price = sale_price - fixed_discount`.
      - Ensure that any quantity limits are applied appropriately.

3. **Buy X, Get Y Promotions**:
    - **Buy 1 Get 1 Free, Buy X Get Y Free or at a Discount**:
      - Apply the free or discounted price proportionally to the offer.

4. **Multi-Buy Offers**:
    - **Buy X for $Y** (e.g., "2 for $3.00"):
      - Calculate the price for the specified number of items and compute the unit price.

5. **Tiered or Combo Discounts**:
    - **Save $X when buying two or more items in the same transaction**:
      - Apply the discount only if the required items are purchased together.

6. **Volume or Bundle Discounts**:
    - **Save on volume purchases** (e.g., "Save Up To $0.98 on 2 items"):
      - Apply the discount based on the quantity, ensuring any limits are enforced.

7. **Free Items**:
    - **Get Free Item with Purchase**:
      - The price of the free item is set to $0 if conditions are met.

8. **Mixed Discount Offers**:
    - **Multiple Discounts in One Promo**:
      - Apply all discounts based on the promo description and calculate the total.

### Validation Process (Double-Checked Validation):

Before producing the result, ensure **strict validation** by performing the following steps **twice**:

1. **Preferred Price Field**:
   - If `sale_price` is provided, PRIORITIZE using it for all calculations. If not, use `regular_price`.
   - USE `regular_price` FOR CALCULATIONS ONLY IF `sale_price` IS EMPTY.

2. **Promo Price Calculation**:
   - Validate that the calculated `promo_price` is correctly derived from the first sentence of the `promo_description`. Ensure it aligns with the type of promo (fixed discount, percentage discount, bundle, etc.).
   
3. **Unit Price Calculation**:
   - Ensure the `unit_price` reflects the correct price for one unit, based on the total `promo_price` and quantities or limits mentioned in the promo description.
   
4. **Condition Validation**:
   - Validate that any conditions like minimum spend, quantity requirements, or transaction rules (e.g., "Limit 1 offer," "Must buy two items together") are respected.

5. **Final Validation**:
   - After initial calculations, validate the logic again by checking:
     - Correct usage of prices (`sale_price` vs `regular_price`).
     - Accurate discount and unit price calculations.
     - Consistent formatting and valid JSON output (compliant with RFC8259).

### Input:
{INPUT}

### Input Example:
```json
{
    "id": "12345",
    "regular_price": "10.00",
    "sale_price": "8.00",
    "promo_description": "Save $2.00 when you buy 2. Limit 1 offer."
}
```

Do not include explanations. Only provide an RFC8259-compliant JSON response using this format:

{
    "id": "Id of the product",
    "regular_price": "regular price", 
    "sale_price": "sale price if any", 
    "promo_description": "promo description", 
    "promo_price": "calculated promo price from the first sentence of the description or same as sale price if no description", 
    "unit_price": "calculated unit price from the first sentence of the description or same as sale price if no description"
}

The JSON Response:

